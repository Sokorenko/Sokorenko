orange - 61

const getUniqueValues = array => [...new Set(array)];

58,11,65,2,80,20,54,59,72,87,45,16,30,26,31,3,98,5,41,64,93,64,98,74,88,78,92,31,12,41,38,38,77,12,71,76,92,84,34,29,88,82,27,54,82,82,2,76,70,63,85,7,85,82,47,55,37,89,48,52 + 24
const sumAllNumbers = (...numbers) => numbers.reduce((sum, num) => sum + num, 0);
true / false
console.log(getRandomString());
for (let i = 0; i < getRandomNumber(); i++) { console.log(getRandomString()); }

const capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1);
15 + 95,36,57,62,15,89,88,20,78,24,29,62,19,43,5,47,77,72,99,28,92,83,52,53,36,88,96,71,12,57,80,18,98,67,27,44,34,0,65,95,88,61,25,69,66
const randomNumber = getRandomNumber();
const flattenArray = array => array.reduce((flat, current) => flat.concat(Array.isArray(current) ? flattenArray(current) : current), []);
39 + 79
const rotateArrayLeft = (array, k) => { const rotations = k % array.length; return [...array.slice(rotations), ...array.slice(0, rotations)]; };
banana

const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);
if (getRandomBoolean()) { console.log("True"); } else { console.log("False"); }
const divide = (a, b) => (b !== 0 ? a / b : "Cannot divide by zero");
const isEven = num => num % 2 === 0;
banana * grape
const removeDuplicates = array => Array.from(new Set(array));

const findLongestWord = sentence => sentence.split(" ").reduce((longest, word) => word.length > longest.length ? word : longest, "");
const deepClone = obj => JSON.parse(JSON.stringify(obj));

false - orange
const greet = name => `Hello, ${name}!`;
apple


const divide = (a, b) => (b !== 0 ? a / b : "Cannot divide by zero");
24 / true
const flattenObject = (obj, parentKey = "") => Object.keys(obj).reduce((acc, key) => { const newKey = parentKey ? `${parentKey}.${key}` : key; if (typeof obj[key] === "object") Object.assign(acc, flattenObject(obj[key], newKey)); else acc[newKey] = obj[key]; return acc; }, {});
90 - 47
const getRandomElement = array => array[getRandomIndex(array)];
true / banana

const flattenObject = (obj, parentKey = "") => Object.keys(obj).reduce((acc, key) => { const newKey = parentKey ? `${parentKey}.${key}` : key; if (typeof obj[key] === "object") Object.assign(acc, flattenObject(obj[key], newKey)); else acc[newKey] = obj[key]; return acc; }, {});
grape

const camelCaseToSnakeCase = str => str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);
const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);

const getRandomElement = array => array[getRandomIndex(array)];
kiwi

const squareRoot = num => Math.sqrt(num);

const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);
1,10,27,61,77,40,30,40,31,86,88,80,64,79,22,82,46,35,25,31,97,29,35,87,32,41,50,2,16,95,88,5,18,63,42,10,29,91,5,46,22,67,33,66,60,21,10,44,1,11,6,90,6,25,22,60 / 15
const calculateFactorial = n => n === 0 ? 1 : n * calculateFactorial(n - 1);
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
const timeoutPromise = (ms, value) => new Promise(resolve => setTimeout(() => resolve(value), ms));
75,80,4,7,99,7,26,28,56,68,57,41,35,58,3,31,11,19,3,98,22,83,78,12,25,94 / orange
const findAverage = numbers => numbers.reduce((sum, num) => sum + num, 0) / numbers.length;
const binarySearch = (array, target) => { let start = 0, end = array.length - 1; while (start <= end) { const mid = Math.floor((start + end) / 2); if (array[mid] === target) return mid; else if (array[mid] < target) start = mid + 1; else end = mid - 1; } return -1; };
grape


const formatCurrency = (amount, currency = "USD") => new Intl.NumberFormat("en-US", { style: "currency", currency }).format(amount);
banana

const getRandomHexColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;
apple

const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);
kiwi + apple
const getRandomElement = array => array[getRandomIndex(array)];
const sumOfPrimes = limit => { const isPrime = num => { for (let i = 2; i < num; i++) if (num % i === 0) return false; return num > 1; }; return Array.from({ length: limit }, (_, index) => index).filter(isPrime).reduce((sum, prime) => sum + prime, 0); };
true + kiwi
const sum = (a, b) => a + b;
93 / 98
const debounce = (func, delay) => { let timeout; return (...args) => { clearTimeout(timeout); timeout = setTimeout(() => func(...args), delay); }; };
const findAverage = numbers => numbers.reduce((sum, num) => sum + num, 0) / numbers.length;
const getUniqueCharacters = str => Array.from(new Set(str)).join("");
77 - true

const isPalindrome = str => str === str.split("").reverse().join("");
const curry = (fn, arity = fn.length, ...args) => arity <= args.length ? fn(...args) : curry.bind(null, fn, arity, ...args);
const removeDuplicates = array => Array.from(new Set(array));
const findAverage = numbers => numbers.reduce((sum, num) => sum + num, 0) / numbers.length;

79 / orange
const randomNumber = getRandomNumber();

8,47,40,71,0,50,17,42,7,34,86,99,67,88,84,85,11,45,9,3,25,17,75,1,78,39,51,27,40,61,21,35,41,49,15,46,38,29,25,59,8,57,43,19,4,60,95,1,80,44,46,3,26,79,76,90,67,98,8,82,41,19,13,4,63,34,5,56,62,88,33,24,99,24,48,26,19,99,43,47,97,59,94,75,83,96,83,17,91,13,73,97,30 - 57,17,7,44,35,49,1,91,60,43,75,35,83,81,41,0,71,85,18,53,23,91,78,80,44,95,24,68,11,83,62,93,64,25,54,13
const camelCaseToSnakeCase = str => str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);
41,61,89,55,22,91,91,65,63,31,1,93,30,30,77,36,56,54,22,41,48,17,23,66,42,6,55,70,34,16,41,42,57,98,70,0,21,15,88,65,48,8,51,82,51,72,39,52,78,50,68,73,77,19 / 57
for (let i = 0; i < getRandomNumber(); i++) { console.log(getRandomString()); }
